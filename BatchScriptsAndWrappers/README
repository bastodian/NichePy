    To make the most efficient use of the scripts that are part of
    NichePy you may want to create ecological niche/species
    distribution models in batch mode.

    We included examples for running batch jobs in both OpenModeller
    and Maxent. You will need to modify these scripts to suit your 
    needs.

OPENMODELLER:

    Contained in this folder are 2 scripts that we use to run models 
    in batch mode through the headless version of OpenModeller 
    on the command line.

    OpenModeller can generate a variety of models using different 
    approaches. To our knowledge, the Maxent implementation in OM
    does currently not produce results identical to Maxent. So if
    you want to run Maxent models you are probably better off using
    Maxent directly at this point in time.

    CSVtoOM.sh converts the comma-delimited csv files generated by
    nicheIdentity or nicheBackground into tab-delimited text files
    suitable as input to OM. You can also use these files as input 
    for the GUI version of OM. The input and output of CSVtoOM.sh
    is explained in the comments in the script.

    OmWrapper.py is a wrapper that modifies the OM input file
    OmRequest.txt and passes it on to OM. Please refer to the comments
    in OmWrapper.py to get a general idea of what the wrapper 
    does. This script runs batch jobs through OM's cli program 
    om_console and will require you to modify at least the 
    OmRequest.txt file to make it work for your specific analysis. 
    In addition, you will need a functioning installation of om_console.
        The om_console input file specification can be found here:
    http://openmodeller.sourceforge.net/index.php?option=com_content&task=view&id=27&Itemid=11
        In order to run OM without its GUI you will probably need to 
        build from source:
    http://openmodeller.sourceforge.net/INSTALL.html

MAXENT:

    MaxentBatchExample.sh should give you an idea for how to run
    Maxent from the command line in batch mode. Options for Maxent
    change frequently and flags are regularly deprecated. Please
    refer to the Maxent documentation for the options supported by 
    the version of Maxent you downloaded. In the Maxent GUI console
    select the Help tab to get information about the flags supported
    by your version of Maxent.

CONSENSUS MODELS:

    Below is an outline for how we generated consensus models by averaging found
    in the Example folder. The approach in our script and wrapper are pretty
    brute force and not very fast or efficient. If we generate consensus models
    in the future we will write a Python solution. To document what we did,
    however, look at the description below and take a look at the scripts
    ConsensusWrapper.sh and Consensus.sh.

    We generated a set of simple consensus models by averaging ENFA and 
    RF models. The wrapper ConsensusWrapper.sh modifies the script Consensus.sh
    by searching for and replacing the name of the inout models in a folder.
    For this to work all pairs of ARC/INFO ASCII files that should be averaged
    need to be in a single folder and all models need to be numbered with _digit. 
    The number of models needs to be passed on to the wrapper as the last argument
    to the wrapper.

    ConsensusWrapper.sh Genus_species1 Genus_species2 Output_Model numReplicates 

    E.g.:

    myModels/ENFAAnolis_chlorocyanus_0.asc
    myModels/ENFAAnolis_chlorocyanus_1.asc

    myModels/ENFAAnolis_coelestinus_0.asc
    myModels/ENFAAnolis_coelestinus_1.asc

    myModels/RFAnolis_chlorocyanus_0.asc
    myModels/RFAnolis_chlorocyanus_1.asc

    myModels/RFAnolis_coelestinus_0.asc
    myModels/RFAnolis_coelestinus_1.asc

    ConsensusWrapper.sh ENFAAnolis_chlorocyanus RFAnolis_clorocyanus OutputModel 2 
